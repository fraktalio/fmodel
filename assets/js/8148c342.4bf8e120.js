"use strict";(self.webpackChunkfmodel=self.webpackChunkfmodel||[]).push([[2207],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,f=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},418:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:1},o="Rust",l={unversionedId:"other/rust",id:"other/rust",title:"Rust",description:"Domain modeling, influenced by functional programming principles, aims to represent the business domain in the code accurately.",source:"@site/docs/other/rust.md",sourceDirName:"other",slug:"/other/rust",permalink:"/fmodel/docs/other/rust",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Other Programming Languages",permalink:"/fmodel/docs/category/other-programming-languages"},next:{title:"TypeScript",permalink:"/fmodel/docs/other/type-script"}},p={},u=[{value:"Decide",id:"decide",level:2},{value:"Evolve",id:"evolve",level:2},{value:"Further reading",id:"further-reading",level:2}],s={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rust"},"Rust"),(0,a.kt)("p",null,"Domain modeling, influenced by functional programming principles, aims to represent the business domain in the code accurately.\n",(0,a.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/"},"Rust")," is ideal thanks to its ownership model and type system, which enforce correctness and reliability - enabling you to eliminate many classes of bugs at compile-time, guarantying memory-safety and thread-safety."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can find the source code for the ",(0,a.kt)("inlineCode",{parentName:"li"},"fmodel-rust")," ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/fraktalio/fmodel-rust"},"here")),(0,a.kt)("li",{parentName:"ul"},"Publicly available at ",(0,a.kt)("a",{parentName:"li",href:"https://crates.io/crates/fmodel-rust"},"crates.io")," and "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.rs/fmodel-rust/latest/fmodel_rust/"},"docs.rs"))),(0,a.kt)("h2",{id:"decide"},"Decide"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"type DecideFunction<'a, C, S, E> = Box<dyn Fn(&C, &S) -> Vec<E> + 'a + Send + Sync>")),(0,a.kt)("p",null,"On a higher level of abstraction, any information system is responsible for handling the intent (",(0,a.kt)("inlineCode",{parentName:"p"},"Command"),") and based on\nthe current ",(0,a.kt)("inlineCode",{parentName:"p"},"State"),", produce new facts (",(0,a.kt)("inlineCode",{parentName:"p"},"Events"),"):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"given the current ",(0,a.kt)("inlineCode",{parentName:"li"},"State/S")," ",(0,a.kt)("em",{parentName:"li"},"on the input"),","),(0,a.kt)("li",{parentName:"ul"},"when ",(0,a.kt)("inlineCode",{parentName:"li"},"Command/C")," is handled ",(0,a.kt)("em",{parentName:"li"},"on the input"),","),(0,a.kt)("li",{parentName:"ul"},"expect ",(0,a.kt)("inlineCode",{parentName:"li"},"Vec")," of new ",(0,a.kt)("inlineCode",{parentName:"li"},"Events/E")," to be published/emitted ",(0,a.kt)("em",{parentName:"li"},"on the output"))),(0,a.kt)("h2",{id:"evolve"},"Evolve"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"type EvolveFunction<'a, S, E> = Box<dyn Fn(&S, &E) -> S + 'a + Send + Sync>")),(0,a.kt)("p",null,"The new state is always evolved out of the current state ",(0,a.kt)("inlineCode",{parentName:"p"},"S")," and the current event ",(0,a.kt)("inlineCode",{parentName:"p"},"E"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"given the current ",(0,a.kt)("inlineCode",{parentName:"li"},"State/S")," ",(0,a.kt)("em",{parentName:"li"},"on the input"),","),(0,a.kt)("li",{parentName:"ul"},"when ",(0,a.kt)("inlineCode",{parentName:"li"},"Event/E")," is handled ",(0,a.kt)("em",{parentName:"li"},"on the input"),","),(0,a.kt)("li",{parentName:"ul"},"expect new ",(0,a.kt)("inlineCode",{parentName:"li"},"State/S")," to be published ",(0,a.kt)("em",{parentName:"li"},"on the output"))),(0,a.kt)("p",null,"Two functions are wrapped in a datatype class (algebraic data structure), which is generalized with three generic\nparameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Decider<'a, C: 'a, S: 'a, E: 'a> {\n    pub decide: DecideFunction<'a, C, S, E>,\n    pub evolve: EvolveFunction<'a, S, E>,\n    pub initial_state: InitialStateFunction<'a, S>,\n}\n")),(0,a.kt)("h2",{id:"further-reading"},"Further reading"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/fmodel-rust/latest/fmodel_rust/"},(0,a.kt)("strong",{parentName:"a"},"Read more"))))}d.isMDXComponent=!0}}]);