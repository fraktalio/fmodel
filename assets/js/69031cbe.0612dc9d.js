"use strict";(self.webpackChunkfmodel=self.webpackChunkfmodel||[]).push([[780],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>E});var a=n(7462),r=n(7294),i=n(6010),o=n(2466),l=n(6550),s=n(1980),u=n(7392),c=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=p(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[s,u]=g({queryString:n,groupId:a}),[d,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),f=(()=>{const e=s??d;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),b(e)}),[u,b,i]),tabValues:i}}var f=n(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==l&&(d(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},o,{className:(0,i.Z)("tabs__item",k.tabItem,o?.className,{"tabs__item--active":l===t})}),n??t)})))}function h(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=b(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",k.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(h,(0,a.Z)({},e,t)))}function E(e){const t=(0,f.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},3138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),i=n(4866),o=n(5162);const l={sidebar_position:4},s="Aggregating the Behaviour",u={unversionedId:"domain/aggregating-the-behaviour",id:"domain/aggregating-the-behaviour",title:"Aggregating the Behaviour",description:"The combine is a binary operation over the decider, view and saga, satisfying associativity and having an",source:"@site/docs/domain/aggregating-the-behaviour.md",sourceDirName:"domain",slug:"/domain/aggregating-the-behaviour",permalink:"/fmodel/docs/domain/aggregating-the-behaviour",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Modeling the Behaviour",permalink:"/fmodel/docs/domain/modeling-the-behaviour"},next:{title:"Specification By Example",permalink:"/fmodel/docs/domain/specification-by-example"}},c={},d=[],p={toc:d},m="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"aggregating-the-behaviour"},"Aggregating the Behaviour"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"combine")," is a binary operation over the ",(0,r.kt)("inlineCode",{parentName:"p"},"decider"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"view")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"saga"),", satisfying associativity and having an\nidentity/empty element."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Associativity facilitates parallelization by giving us the freedom to break problems into chunks that can be computed\nin parallel.")),(0,r.kt)("p",null,"Functional paradigm and category theory define this algebra as a ",(0,r.kt)("inlineCode",{parentName:"p"},"Monoid"),".\nStated tersely, a ",(0,r.kt)("inlineCode",{parentName:"p"},"monoid")," is a type together with a binary operation (",(0,r.kt)("inlineCode",{parentName:"p"},"combine"),") over that type, satisfying\nassociativity\nand having an identity element (zero/empty)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"combine")," operation is also commutative")," / ",(0,r.kt)("em",{parentName:"p"},"commutative")," ",(0,r.kt)("inlineCode",{parentName:"p"},"monoid")),(0,r.kt)(i.Z,{groupId:"component-type",queryString:"component-type",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"decider",label:"Decider",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"associative: (decider1 + decider2) + decider3 = decider1 + (decider2 + decider3)\ncommutative: decider1 + decider2 = decider2 + decider1\nzero:        decider1 + decider0 = decider1\n")),(0,r.kt)("p",null,"By combining two or more deciders you get the new decider."),(0,r.kt)("p",null,"This is a formal signature of the ",(0,r.kt)("inlineCode",{parentName:"p"},"combine")," extension function defined on the ",(0,r.kt)("inlineCode",{parentName:"p"},"decider"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"inline infix fun <reified C1 : C_SUPER, S1, reified E1 : E_SUPER, reified C2 : C_SUPER, S2, reified E2 : E_SUPER, C_SUPER, E_SUPER> Decider<C1?, S1, E1?>.combine(\n    y: Decider<C2?, S2, E2?>\n): Decider<C_SUPER, Pair<S1, S2>, E_SUPER>\n")),(0,r.kt)("p",null,"Type parameters are restricted by generic constraints. Notice the upper\nbounds ",(0,r.kt)("inlineCode",{parentName:"p"},"C1 : C_SUPER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"E1 : E_SUPER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"C2 : C_SUPER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"E2 : E_SUPER"),"."),(0,r.kt)("p",null,"It is only possible to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"combine")," function when:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"E1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"E2")," have common superclass ",(0,r.kt)("inlineCode",{parentName:"li"},"E_SUPER")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"C1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"C2"),"  have common superclass ",(0,r.kt)("inlineCode",{parentName:"li"},"C_SUPER")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"C1?"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"C2?"),",  ",(0,r.kt)("inlineCode",{parentName:"li"},"E1?")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"E2?")," are nullable.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val orderDecider: Decider<OrderCommand?, Order?, OrderEvent?> = orderDecider()\nval restaurantDecider: Decider<RestaurantCommand?, Restaurant?, RestaurantEvent?> = restaurantDecider()\n\n// Combining two deciders into one big decider that can handle all commands of the system.\nval allDecider: Decider<Command?, Pair<Order?, Restaurant?>, Event?> = orderDecider combine restaurantDecider\n")),(0,r.kt)("p",null,"If the constraints are not met, the ",(0,r.kt)("inlineCode",{parentName:"p"},"combine")," function will not be available for usage!")),(0,r.kt)(o.Z,{value:"view",label:"View",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"associative: (view1 + view2) + view3 = view1 + (view2 + view3)\ncommutative: view1 + view2 = view2 + view1\nzero:        view1 + view0 = view1\n")),(0,r.kt)("p",null,"By combining two or more views you get the new view."),(0,r.kt)("p",null,"This is a formal signature of the ",(0,r.kt)("inlineCode",{parentName:"p"},"combine")," extension function defined on the ",(0,r.kt)("inlineCode",{parentName:"p"},"view"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"inline infix fun <Sx, reified Ex : E_SUPER, Sy, reified Ey : E_SUPER, E_SUPER> View<Sx, Ex?>.combine(y: View<Sy, Ey?>): View<Pair<Sx, Sy>, E_SUPER>\n")),(0,r.kt)("p",null,"Type parameters are restricted by generic constraints. Notice the upper bounds ",(0,r.kt)("inlineCode",{parentName:"p"},"Ex : E_SUPER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Ey : E_SUPER"),"."),(0,r.kt)("p",null,"It is only possible to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"combine")," function when:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Ex")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Ey")," have common superclass ",(0,r.kt)("inlineCode",{parentName:"li"},"E_SUPER")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Ex?")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Ey?")," are nullable.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val orderView: View<OrderViewState?, OrderEvent?> = orderView()\nval restaurantView: View<RestaurantViewState?, RestaurantEvent?> = restaurantView()\n\n// Combining two views into one big view that can handle all events of the system.\nval allView: View<Pair<OrderViewState?, RestaurantViewState?>, Event?> = orderView combine restaurantView\n")),(0,r.kt)("p",null,"If the constraints are not met, the ",(0,r.kt)("inlineCode",{parentName:"p"},"combine")," function will not be available for usage!")),(0,r.kt)(o.Z,{value:"saga",label:"Saga",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"associative: (saga1 + saga2) + saga3 = saga1 + (saga2 + saga3)\ncommutative: saga1 + saga2 = saga2 + saga1\nzero:        saga1 + saga0 = saga1\n")),(0,r.kt)("p",null,"By combining two or more sagas you get the new saga."),(0,r.kt)("p",null,"This is a formal signature of the ",(0,r.kt)("inlineCode",{parentName:"p"},"combine")," extension function defined on the ",(0,r.kt)("inlineCode",{parentName:"p"},"saga"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"inline infix fun <reified ARx : AR_SUPER, Ax : A_SUPER, reified ARy : AR_SUPER, Ay : A_SUPER, AR_SUPER, A_SUPER> Saga<in ARx?, out Ax>.combine(\n    y: Saga<in ARy?, out Ay>\n): Saga<AR_SUPER, A_SUPER>\n")),(0,r.kt)("p",null,"Type parameters are restricted by generic constraints. Notice the upper\nbounds ",(0,r.kt)("inlineCode",{parentName:"p"},"ARx : AR_SUPER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ARy : AR_SUPER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Ax : A_SUPER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Ay : A_SUPER"),"."),(0,r.kt)("p",null,"It is only possible to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"combine")," function when:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ARx")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"ARy")," have common superclass ",(0,r.kt)("inlineCode",{parentName:"li"},"AR_SUPER")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Ax")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Ay")," have common superclass ",(0,r.kt)("inlineCode",{parentName:"li"},"A_SUPER")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ARx?")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"ARy?")," are nullable.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val orderSaga: Saga<RestaurantEvent?, OrderCommand> = orderSaga()\nval restaurantSaga: Saga<OrderEvent?, RestaurantCommand> = restaurantSaga()\n\n// Combining two choreography sagas into one big system orchestrating saga.\nval allSaga: Saga<Event?, Command> = orderSaga combine restaurantSaga\n")),(0,r.kt)("p",null,"If the constraints are not met, the ",(0,r.kt)("inlineCode",{parentName:"p"},"combine")," function will not be available for usage!"))))}g.isMDXComponent=!0}}]);