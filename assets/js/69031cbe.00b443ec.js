"use strict";(self.webpackChunkfmodel=self.webpackChunkfmodel||[]).push([[3780],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(t),m=i,f=c["".concat(p,".").concat(m)]||c[m]||d[m]||r;return t?a.createElement(f,l(l({ref:n},u),{},{components:t})):a.createElement(f,l({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(7294),i=t(6010);const r={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r.tabItem,l),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>E});var a=t(7462),i=t(7294),r=t(6010),l=t(2466),o=t(6550),p=t(1980),s=t(7392),u=t(12);function c(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}function d(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??c(t);return function(e){const n=(0,s.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,p._X)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=d(e),[l,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[p,s]=f({queryString:t,groupId:a}),[c,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,u.Nk)(t);return[a,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),k=(()=>{const e=p??c;return m({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{k&&o(k)}),[k]);return{selectedValue:l,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),s(e),g(e)}),[s,g,r]),tabValues:r}}var k=t(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:n,block:t,selectedValue:o,selectValue:p,tabValues:s}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),d=e=>{const n=e.currentTarget,t=u.indexOf(n),a=s[t].value;a!==o&&(c(n),p(a))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},s.map((e=>{let{value:n,label:t,attributes:l}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:d},l,{className:(0,r.Z)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":o===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function h(e){const n=g(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",b.tabList)},i.createElement(y,(0,a.Z)({},e,n)),i.createElement(v,(0,a.Z)({},e,n)))}function E(e){const n=(0,k.Z)();return i.createElement(h,(0,a.Z)({key:String(n)},e))}},3138:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(7462),i=(t(7294),t(3905)),r=t(4866),l=t(5162);const o={sidebar_position:4},p="Aggregating the Behaviour",s={unversionedId:"domain/aggregating-the-behaviour",id:"domain/aggregating-the-behaviour",title:"Aggregating the Behaviour",description:"The combine is a binary operation over the decider, view and saga, satisfying associativity and having an",source:"@site/docs/domain/aggregating-the-behaviour.md",sourceDirName:"domain",slug:"/domain/aggregating-the-behaviour",permalink:"/fmodel/docs/domain/aggregating-the-behaviour",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Modeling the Behaviour",permalink:"/fmodel/docs/domain/modeling-the-behaviour"},next:{title:"Specification By Example",permalink:"/fmodel/docs/domain/specification-by-example"}},u={},c=[],d={toc:c},m="wrapper";function f(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"aggregating-the-behaviour"},"Aggregating the Behaviour"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"combine")," is a binary operation over the ",(0,i.kt)("inlineCode",{parentName:"p"},"decider"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"view")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"saga"),", satisfying associativity and having an\nidentity/empty element."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Associativity facilitates parallelization by giving us the freedom to break problems into chunks that can be computed\nin parallel.")),(0,i.kt)("p",null,"Functional paradigm and category theory define this algebra as a ",(0,i.kt)("inlineCode",{parentName:"p"},"Monoid"),".\nStated tersely, a ",(0,i.kt)("inlineCode",{parentName:"p"},"monoid")," is a type together with a binary operation (",(0,i.kt)("inlineCode",{parentName:"p"},"combine"),") over that type, satisfying\nassociativity\nand having an identity element (zero/empty)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"combine")," operation is also commutative")," / ",(0,i.kt)("em",{parentName:"p"},"commutative")," ",(0,i.kt)("inlineCode",{parentName:"p"},"monoid")),(0,i.kt)(r.Z,{groupId:"component-type",queryString:"component-type",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"decider",label:"Decider",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"associative: (decider1 + decider2) + decider3 = decider1 + (decider2 + decider3)\ncommutative: decider1 + decider2 = decider2 + decider1\nzero:        decider1 + decider0 = decider1\n")),(0,i.kt)("p",null,"By combining two or more deciders you get the new decider."),(0,i.kt)("p",null,"This is a formal signature of the ",(0,i.kt)("inlineCode",{parentName:"p"},"combine")," extension function defined on the ",(0,i.kt)("inlineCode",{parentName:"p"},"decider"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"inline infix fun <reified C1 : C_SUPER, S1, reified E1 : E_SUPER, reified C2 : C_SUPER, S2, reified E2 : E_SUPER, C_SUPER, E_SUPER> Decider<C1?, S1, E1?>.combine(\n    y: Decider<C2?, S2, E2?>\n): Decider<C_SUPER, Pair<S1, S2>, E_SUPER>\n")),(0,i.kt)("p",null,"Type parameters are restricted by generic constraints. Notice the upper\nbounds ",(0,i.kt)("inlineCode",{parentName:"p"},"C1 : C_SUPER"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"E1 : E_SUPER"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"C2 : C_SUPER"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"E2 : E_SUPER"),"."),(0,i.kt)("p",null,"It is only possible to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"combine")," function when:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"E1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"E2")," have common superclass ",(0,i.kt)("inlineCode",{parentName:"li"},"E_SUPER")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"C2"),"  have common superclass ",(0,i.kt)("inlineCode",{parentName:"li"},"C_SUPER")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C1?"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"C2?"),",  ",(0,i.kt)("inlineCode",{parentName:"li"},"E1?")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"E2?")," are nullable.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val orderDecider: Decider<OrderCommand?, Order?, OrderEvent?> = orderDecider()\nval restaurantDecider: Decider<RestaurantCommand?, Restaurant?, RestaurantEvent?> = restaurantDecider()\n\n// Combining two deciders into one big decider that can handle all commands of the system.\nval allDecider: Decider<Command?, Pair<Order?, Restaurant?>, Event?> = orderDecider combine restaurantDecider\n")),(0,i.kt)("p",null,"If the constraints are not met, the ",(0,i.kt)("inlineCode",{parentName:"p"},"combine")," function will not be available for usage!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mappable")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Additionally, ",(0,i.kt)("inlineCode",{parentName:"p"},"Decider<C, S, E>")," provides map functions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"inline fun <Cn> mapLeftOnCommand(\n    crossinline f: (Cn) -> C\n): Decider<Cn, S, E>\n\ninline fun <En> dimapOnEvent(\n    crossinline fl: (En) -> E, crossinline fr: (E) -> En\n): Decider<C, S, En>\n\ninline fun <Sn> dimapOnState(\n    crossinline fl: (Sn) -> S, crossinline fr: (S) -> Sn\n): Decider<C, Sn, E>\n")),(0,i.kt)("p",null,"For example the ",(0,i.kt)("inlineCode",{parentName:"p"},"allDecider")," of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Decider<Command?, Pair<Order?, Restaurant?>, Event?>")," can be mapped into a ",(0,i.kt)("inlineCode",{parentName:"p"},"newAllDecider")," of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Decider<Command?, MyDomainSpecificType, Event?>"),", effectively eliminating the ",(0,i.kt)("inlineCode",{parentName:"p"},"Pair"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val newAllDecider = allDecider.dimapOnState(\n            fl = { myDomainSpecificType: MyDomainSpecificType -> Pair(myDomainSpecificType.order, myDomainSpecificType.restaurant) },\n            fr = { pair: Pair<Order?, Restaurant?> -> MyDomainSpecificType(pair.first, pair.second) }\n        )\n"))),(0,i.kt)(l.Z,{value:"view",label:"View",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"associative: (view1 + view2) + view3 = view1 + (view2 + view3)\ncommutative: view1 + view2 = view2 + view1\nzero:        view1 + view0 = view1\n")),(0,i.kt)("p",null,"By combining two or more views you get the new view."),(0,i.kt)("p",null,"This is a formal signature of the ",(0,i.kt)("inlineCode",{parentName:"p"},"combine")," extension function defined on the ",(0,i.kt)("inlineCode",{parentName:"p"},"view"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"inline infix fun <Sx, reified Ex : E_SUPER, Sy, reified Ey : E_SUPER, E_SUPER> View<Sx, Ex?>.combine(y: View<Sy, Ey?>): View<Pair<Sx, Sy>, E_SUPER>\n")),(0,i.kt)("p",null,"Type parameters are restricted by generic constraints. Notice the upper bounds ",(0,i.kt)("inlineCode",{parentName:"p"},"Ex : E_SUPER"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Ey : E_SUPER"),"."),(0,i.kt)("p",null,"It is only possible to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"combine")," function when:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Ex")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Ey")," have common superclass ",(0,i.kt)("inlineCode",{parentName:"li"},"E_SUPER")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Ex?")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Ey?")," are nullable.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val orderView: View<OrderViewState?, OrderEvent?> = orderView()\nval restaurantView: View<RestaurantViewState?, RestaurantEvent?> = restaurantView()\n\n// Combining two views into one big view that can handle all events of the system.\nval allView: View<Pair<OrderViewState?, RestaurantViewState?>, Event?> = orderView combine restaurantView\n")),(0,i.kt)("p",null,"If the constraints are not met, the ",(0,i.kt)("inlineCode",{parentName:"p"},"combine")," function will not be available for usage!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mappable")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Additionally, ",(0,i.kt)("inlineCode",{parentName:"p"},"View<S, E>")," provides map functions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"inline fun <En> mapLeftOnEvent(\n    crossinline f: (En) -> E\n): View<S, En>\n\ninline fun <Sn> dimapOnState(\n    crossinline fl: (Sn) -> S,\n    crossinline fr: (S) -> Sn\n): View<Sn, E>\n")),(0,i.kt)("p",null,"For example the ",(0,i.kt)("inlineCode",{parentName:"p"},"allView")," of type ",(0,i.kt)("inlineCode",{parentName:"p"},"View<Pair<OrderViewState?, RestaurantViewState?>, Event?>")," can be mapped into a ",(0,i.kt)("inlineCode",{parentName:"p"},"newAllView")," of type ",(0,i.kt)("inlineCode",{parentName:"p"},"View<MyDomainSpecificType, Event?>"),", effectively eliminating the ",(0,i.kt)("inlineCode",{parentName:"p"},"Pair"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val newAllView = allView.dimapOnState(\n            fl = { myDomainSpecificType: MyDomainSpecificType -> Pair(myDomainSpecificType.order, myDomainSpecificType.restaurant) },\n            fr = { pair: Pair<OrderViewState?, RestaurantViewState?> -> MyDomainSpecificType(pair.first, pair.second) }\n        )\n"))),(0,i.kt)(l.Z,{value:"saga",label:"Saga",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"associative: (saga1 + saga2) + saga3 = saga1 + (saga2 + saga3)\ncommutative: saga1 + saga2 = saga2 + saga1\nzero:        saga1 + saga0 = saga1\n")),(0,i.kt)("p",null,"By combining two or more sagas you get the new saga."),(0,i.kt)("p",null,"This is a formal signature of the ",(0,i.kt)("inlineCode",{parentName:"p"},"combine")," extension function defined on the ",(0,i.kt)("inlineCode",{parentName:"p"},"saga"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"inline infix fun <reified ARx : AR_SUPER, Ax : A_SUPER, reified ARy : AR_SUPER, Ay : A_SUPER, AR_SUPER, A_SUPER> Saga<in ARx?, out Ax>.combine(\n    y: Saga<in ARy?, out Ay>\n): Saga<AR_SUPER, A_SUPER>\n")),(0,i.kt)("p",null,"Type parameters are restricted by generic constraints. Notice the upper\nbounds ",(0,i.kt)("inlineCode",{parentName:"p"},"ARx : AR_SUPER"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ARy : AR_SUPER"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Ax : A_SUPER"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Ay : A_SUPER"),"."),(0,i.kt)("p",null,"It is only possible to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"combine")," function when:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ARx")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"ARy")," have common superclass ",(0,i.kt)("inlineCode",{parentName:"li"},"AR_SUPER")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Ax")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Ay")," have common superclass ",(0,i.kt)("inlineCode",{parentName:"li"},"A_SUPER")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ARx?")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"ARy?")," are nullable.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val orderSaga: Saga<RestaurantEvent?, OrderCommand> = orderSaga()\nval restaurantSaga: Saga<OrderEvent?, RestaurantCommand> = restaurantSaga()\n\n// Combining two choreography sagas into one big system orchestrating saga.\nval allSaga: Saga<Event?, Command> = orderSaga combine restaurantSaga\n")),(0,i.kt)("p",null,"If the constraints are not met, the ",(0,i.kt)("inlineCode",{parentName:"p"},"combine")," function will not be available for usage!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mappable")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Additionally, ",(0,i.kt)("inlineCode",{parentName:"p"},"Saga<AR, A>")," provides map functions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"inline fun <ARn> mapLeftOnActionResult(crossinline f: (ARn) -> AR): Saga<ARn, A>\n\ninline fun <An> mapOnAction(crossinline f: (A) -> An): Saga<AR, An>\n")))))}f.isMDXComponent=!0}}]);