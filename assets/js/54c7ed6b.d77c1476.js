"use strict";(self.webpackChunkfmodel=self.webpackChunkfmodel||[]).push([[7992],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7462),r=n(7294),o=n(6010),i=n(2466),l=n(6550),s=n(1980),p=n(7392),d=n(12);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function u(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=u(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,p]=h({queryString:n,groupId:a}),[c,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),v=(()=>{const e=s??c;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{v&&l(v)}),[v]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),f(e)}),[p,f,o]),tabValues:o}}var v=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:p}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),u=e=>{const t=e.currentTarget,n=d.indexOf(t),a=p[n].value;a!==l&&(c(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:u},i,{className:(0,o.Z)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function b(e){const t=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(k,(0,a.Z)({},e,t)))}function w(e){const t=(0,v.Z)();return r.createElement(b,(0,a.Z)({key:String(t)},e))}},59:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),i=n(5162);const l={sidebar_position:1},s="Architecture",p={unversionedId:"application/architecture",id:"application/architecture",title:"Architecture",description:"We learned how to model the domain effectively by using types and functions.",source:"@site/docs/application/architecture.md",sourceDirName:"application",slug:"/application/architecture",permalink:"/fmodel/docs/application/architecture",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Composing The Application",permalink:"/fmodel/docs/category/composing-the-application"},next:{title:"Application",permalink:"/fmodel/docs/application/"}},d={},c=[{value:"The Application layer",id:"the-application-layer",level:2},{value:"Event-sourced or State-stored systems",id:"event-sourced-or-state-stored-systems",level:2},{value:"View model",id:"view-model",level:4}],u={toc:c},m="wrapper";function h(e){let{components:t,...l}=e;return(0,r.kt)(m,(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"architecture"},"Architecture"),(0,r.kt)("p",null,"We learned how to model the domain effectively by using types and functions.\nWe used ",(0,r.kt)("inlineCode",{parentName:"p"},"decider"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"view"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"saga")," components from FModel library to model the behavior using pure functions."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"These components do not care about storing or fetching the data."),(0,r.kt)("li",{parentName:"ul"},"They do not produce any side effects of this kind."),(0,r.kt)("li",{parentName:"ul"},"They represent pure computation / pure logics of a program.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"domain components",src:n(9609).Z,width:"4271",height:"2233"})),(0,r.kt)("p",null,"Functional Programming emphasizes separating the pure logic of a program (algebras) and the runtime used to run it."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Flagging a computation as ",(0,r.kt)("inlineCode",{parentName:"p"},"suspend")," enforces a calling context, meaning the compiler can ensure that we can\u2019t call the\neffect from anywhere other than an environment prepared to run suspended effects. That will be another suspended\nfunction or a Coroutine. This effectively means we\u2019re decoupling the pure declaration of our program logic (frequently\ncalled algebras in the functional world) from the runtime. And therefore, the runtime has the chance to see the big\npicture of our program and decide how to run and optimize it.")),(0,r.kt)("h2",{id:"the-application-layer"},"The Application layer"),(0,r.kt)("p",null,"The logic execution will be orchestrated by the outside components (application components) that use the domain\ncomponents (",(0,r.kt)("inlineCode",{parentName:"p"},"decider"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"view"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"saga"),") to do the computations. These components will be responsible for fetching and\nsaving the data (suspended effects)."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"onion architecture image",src:n(3637).Z,width:"3317",height:"3588"})),(0,r.kt)("p",null,"The arrows in the image show the direction of the dependency.\n",(0,r.kt)("strong",{parentName:"p"},"Notice that all dependencies point inwards and that Domain does not depend on anybody or anything.")),(0,r.kt)("p",null,"Pushing these decisions from the core domain model is very valuable.\nBeing able to postpone them is a sign of good architecture."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This architectural style is known as ",(0,r.kt)("inlineCode",{parentName:"p"},"Functional Core, Imperative Shell"),". A bit simplified, it is characterized by two key architectural attributes:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"There is a core with the core business logic, and a shell that handles interactions with the outside world, such as persisting data in databases or providing UIs to interact with end users."),(0,r.kt)("li",{parentName:"ul"},"The shell can call the core, but the core cannot call the shell and the core is even unaware of the existence of the shell. This is also known as the Dependency Rule (see, for example, Clean Architecture to learn more about this rule).")),(0,r.kt)("p",{parentName:"admonition"},"It is similar to Hexagonal Architecture, Ports and Adapters, Clean Architecture, Onion Architecture which have these two attributes in common.")),(0,r.kt)("h2",{id:"event-sourced-or-state-stored-systems"},"Event-sourced or State-stored systems"),(0,r.kt)("p",null,"The domain model is explicitly modeling ",(0,r.kt)("inlineCode",{parentName:"p"},"events")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"state,")," and this opens some interesting options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"fetch ",(0,r.kt)("inlineCode",{parentName:"li"},"events"),", execute domain components/compute, and store new ",(0,r.kt)("inlineCode",{parentName:"li"},"events")," by appending to the previous events in the\nstorage / ",(0,r.kt)("strong",{parentName:"li"},"event-sourced systems")," / ",(0,r.kt)("strong",{parentName:"li"},"event-stored systems")),(0,r.kt)("li",{parentName:"ul"},"fetch ",(0,r.kt)("inlineCode",{parentName:"li"},"state"),", execute domain components/compute, and store new ",(0,r.kt)("inlineCode",{parentName:"li"},"state")," by overwriting the previous state in the\nstorage / traditional / ",(0,r.kt)("strong",{parentName:"li"},"state-stored systems"))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"event-stored or state-stored",src:n(7871).Z,width:"3537",height:"1123"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Event-Sourced systems are storing the ",(0,r.kt)("inlineCode",{parentName:"li"},"events")," in immutable storage by only appending."),(0,r.kt)("li",{parentName:"ul"},"State-Stored systems are traditional systems that are only storing the current ",(0,r.kt)("inlineCode",{parentName:"li"},"state")," by overwriting the previous ",(0,r.kt)("inlineCode",{parentName:"li"},"state")," in the storage.")),(0,r.kt)("p",null,"It is important to realize that your core domain logic does not have to change in order to transit from one flavor to another!"),(0,r.kt)("p",null,"Fmodel exposes couple of types of repository interfaces/ports within the ",(0,r.kt)("inlineCode",{parentName:"p"},"application")," module to support these two flavors:"),(0,r.kt)(o.Z,{groupId:"system-type",queryString:"system-type",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"event-stored",label:"Event-Stored / Event-Sourced",mdxType:"TabItem"},(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EventRepository")," - responsible for storing and fetching the events of deciders"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ViewStateRepository")," - responsible for storing and fetching the state of materialized views"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ActionPublisher")," - responsible for publishing new actions/commands"))),(0,r.kt)(i.Z,{value:"state-stored",label:"State-Stored",mdxType:"TabItem"},(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"StateRepository")," - responsible for storing and fetching the state of deciders")))),(0,r.kt)("p",null,"You can now compose these repository interfaces with the domain components (",(0,r.kt)("inlineCode",{parentName:"p"},"decider"),") in order to implement any of\nthese options (event-stored or state-stored system):"),(0,r.kt)(o.Z,{groupId:"system-type",queryString:"system-type",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"event-stored",label:"Event-Stored / Event-Sourced",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val events = EventRepository.fetchEvents(command)\n\nval state = events.fold(decider.initialState, decider.evolve)\nvar newEvents = decider.decide(command, state)\n\nEventRepository.save(newEvents)\n")),(0,r.kt)("p",null,"An event-stored system is fetching the events by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetchEvents")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"event repository"),".\nIt then evolves the state based on the fetched events and delegates the state and the command to the ",(0,r.kt)("inlineCode",{parentName:"p"},"decider")," component\nwhich will produce new events by executing the ",(0,r.kt)("inlineCode",{parentName:"p"},"decide")," function.\nFinally, the events will be stored via the ",(0,r.kt)("inlineCode",{parentName:"p"},"save")," function from the ",(0,r.kt)("inlineCode",{parentName:"p"},"event repository"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"event-modeling-event-driven-systems",src:n(5557).Z,width:"5391",height:"3776"})),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The implementation of the ",(0,r.kt)("inlineCode",{parentName:"p"},"event repository")," is not part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Application")," layer. It is delegated to the outside\nInfrastructure/Adapter layers.")),(0,r.kt)("p",null,"With event-stored approach we are effectively splitting the domain model into"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"command model / for writing"),(0,r.kt)("li",{parentName:"ul"},"view/query model / for querying")),(0,r.kt)("p",null,"States of both, command model/yellow and view model/green, are evolved out of the same events.\nThis is making a huge difference, as now you have multiple view models independently serving every page/step in the flow\nwith the data it requires, making these steps decoupled."),(0,r.kt)("p",null,"We are not limited to use a single canonical model for writing and reading/presenting!"),(0,r.kt)("h4",{id:"view-model"},"View model"),(0,r.kt)("p",null,"The ViewStateRepository can be composed with the ",(0,r.kt)("inlineCode",{parentName:"p"},"view")," domain component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val state = ViewStateRepository.fetchState(event)\n\nval newState = view.evolve(state, event)\n\nViewStateRepository.save(newState)\n")),(0,r.kt)("p",null,"A event-stored system is fetching the current view state by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetchState")," method from\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"view state repository"),".\nFinally, the event will fold to the new state by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"view")," ",(0,r.kt)("inlineCode",{parentName:"p"},"evolve")," function, and the new state will be stored\nvia the ",(0,r.kt)("inlineCode",{parentName:"p"},"save")," function from the ",(0,r.kt)("inlineCode",{parentName:"p"},"view state repository"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The implementation of the ",(0,r.kt)("inlineCode",{parentName:"p"},"view state repository")," is not part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Application")," layer. It is delegated to the outside\nInfrastructure/Adapter layers."))),(0,r.kt)(i.Z,{value:"state-stored",label:"State-Stored",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val state = StateRepository.fetchState(command)\n\nval events = decider.decide(command, state)\nval newState = events.fold(state, decider.evolve)\n\nStateRepository.save(newState)\n")),(0,r.kt)("p",null,"A state-stored system is fetching the current state by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetchState")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"state repository"),".\nIt then delegates the command and the current state to the ",(0,r.kt)("inlineCode",{parentName:"p"},"decider")," which will produce a new list of events by\nexecuting the ",(0,r.kt)("inlineCode",{parentName:"p"},"decide")," function.\nFinally, the list of events will fold to the new state by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"decider")," ",(0,r.kt)("inlineCode",{parentName:"p"},"evolve")," function, and the new state will\nbe stored via the ",(0,r.kt)("inlineCode",{parentName:"p"},"save")," function from the ",(0,r.kt)("inlineCode",{parentName:"p"},"state repository"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"event-modeling-traditional-systems",src:n(6567).Z,width:"5480",height:"5461"})),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The implementation of the ",(0,r.kt)("inlineCode",{parentName:"p"},"state repository")," is not part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Application")," layer. It is delegated to the outside\nInfrastructure/Adapter layers.")),(0,r.kt)("p",null,"State-stored systems are using single canonical model for writing and reading/presenting, by default.\nThe single state is represented with the yellow color on the image."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Fmodel offers application interfaces/components which are actually composed out of side-effects (repository interfaces) and core domain logic (decider, view, saga),\nproviding a default implementation and formalizing the concepts we just described:")),(0,r.kt)(o.Z,{groupId:"system-type",queryString:"system-type",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"event-stored",label:"Event-Stored / Event-Sourced",mdxType:"TabItem"},(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EventSourcingAggregate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MaterializedView")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SagaManager")))),(0,r.kt)(i.Z,{value:"state-stored",label:"State-Stored",mdxType:"TabItem"},(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"StateStoredAggregate"))))))}h.isMDXComponent=!0},9609:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/domain-components-8221b3d31062957b4ea61fa80e2e3403.png"},7871:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/es-ss-066c45b7c26a4a0a52fb8e3cd05be5e9.png"},5557:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/event-modeling-event-driven-systems-dd36561b4d665e5dfcc97acc8fccbf92.png"},6567:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/event-modeling-traditional-systems-1f8ef3235fa73ccc9ec41b05082804da.png"},3637:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/onion-0e7a4667c3d94945d08c62a84ad6e063.png"}}]);