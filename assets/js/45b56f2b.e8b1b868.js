"use strict";(self.webpackChunkfmodel=self.webpackChunkfmodel||[]).push([[3113],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>S});var a=n(7462),r=n(7294),i=n(6010),o=n(2466),l=n(6550),s=n(1980),d=n(7392),p=n(12);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=c(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[s,d]=g({queryString:n,groupId:a}),[u,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),v=(()=>{const e=s??u;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{v&&l(v)}),[v]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),y(e)}),[d,y,i]),tabValues:i}}var v=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:d}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.o5)(),c=e=>{const t=e.currentTarget,n=p.indexOf(t),a=d[n].value;a!==l&&(u(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},d.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:c},o,{className:(0,i.Z)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":l===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=y(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",f.tabList)},r.createElement(h,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function S(e){const t=(0,v.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},524:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var a=n(7462),r=(n(7294),n(3905)),i=n(4866),o=n(5162);const l={sidebar_position:2},s="Application",d={unversionedId:"application/application",id:"application/application",title:"Application",description:"The only responsibility of the application layer is to orchestrate the execution of the logic by",source:"@site/docs/application/application.md",sourceDirName:"application",slug:"/application/",permalink:"/fmodel/docs/application/",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/fmodel/docs/application/architecture"},next:{title:"Examples",permalink:"/fmodel/docs/application/example"}},p={},u=[{value:"Event-Sourced vs State-Stored",id:"event-sourced-vs-state-stored",level:2},{value:"Application modules",id:"application-modules",level:2}],c={toc:u},m="wrapper";function g(e){let{components:t,...l}=e;return(0,r.kt)(m,(0,a.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"application"},"Application"),(0,r.kt)("p",null,"The only responsibility of the application layer is to orchestrate the execution of the logic by"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"loading the state from a repository"),(0,r.kt)("li",{parentName:"ul"},"execute logic by executing domain layer components"),(0,r.kt)("li",{parentName:"ul"},"store the new state")),(0,r.kt)("p",null,"Fmodel offers application interfaces/components which are actually composed out of repository interfaces/components (side effects) and core domain components (decision-making):"),(0,r.kt)("h2",{id:"event-sourced-vs-state-stored"},"Event-Sourced vs State-Stored"),(0,r.kt)(i.Z,{groupId:"system-type",queryString:"system-type",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"event-stored",label:"Event-Stored / Event-Sourced",mdxType:"TabItem"},(0,r.kt)("p",null,"Event-stored systems are split to command and view/query models, by default.\nThis is making a huge difference as we are not limited to use a single canonical model for writing and\nreading/presenting!"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"event-modeling-event-driven-systems",src:n(5557).Z,width:"5391",height:"3776"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Event-sourcing Aggregate")," is a formalization of the event-stored/event-sourced system (Command\nModel) ",(0,r.kt)("a",{parentName:"p",href:"/fmodel/docs/application/architecture#event-stored-or-state-stored-systems"},"mentioned previously"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface EventSourcingAggregate<C, S, E> : IDecider<C, S, E>, EventRepository<C, E>\ninterface MaterializedView<S, E> : IView<S, E>, ViewStateRepository<E, S>\ninterface SagaManager<AR, A> : ISaga<AR, A>, ActionPublisher<A>\n")),(0,r.kt)("p",null,"Event-sourcing Aggregate is using/delegating a ",(0,r.kt)("inlineCode",{parentName:"p"},"Decider")," to handle commands and produce events. It belongs to the\nApplication layer. In order to\nhandle the command, aggregate needs to fetch the current state (represented as a list of events)\nvia ",(0,r.kt)("inlineCode",{parentName:"p"},"EventRepository.fetchEvents")," function, and then delegate the command to the decider which can produce new events as\na result. Produced events are then stored via ",(0,r.kt)("inlineCode",{parentName:"p"},"EventRepository.save")," suspending function."),(0,r.kt)("p",null,"The Delegation pattern has proven to be a good alternative to ",(0,r.kt)("inlineCode",{parentName:"p"},"implementation inheritance"),", and Kotlin supports it\nnatively requiring zero boilerplate code.\n",(0,r.kt)("inlineCode",{parentName:"p"},"eventSourcingAggregate")," function, provided by the Fmodel, is a good example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun <C, S, E> eventSourcingAggregate(\n    decider: IDecider<C, S, E>,\n    eventRepository: EventRepository<C, E>\n): EventSourcingAggregate<C, S, E> =\n    object :\n        EventSourcingAggregate<C, S, E>,\n        EventRepository<C, E> by eventRepository,\n        IDecider<C, S, E> by decider {}\n")),(0,r.kt)(i.Z,{groupId:"style",queryString:"style",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"monolith",label:"monolith",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example of a monolith scenario, in which Order and Restaurant deciders\nare ",(0,r.kt)("a",{parentName:"em",href:"/fmodel/docs/domain/aggregating-the-behaviour?component-type=decider"},"combined/aggregated")," in one big decider and then\nwrapped by one aggregate component:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n * A convenient type alias for Decider<OrderCommand?, Order?, OrderEvent?>\n */\ntypealias OrderDecider = Decider<OrderCommand?, Order?, OrderEvent?>\n\n/**\n * A convenient type alias for Decider<RestaurantCommand?, Restaurant?, RestaurantEvent?>\n */\ntypealias RestaurantDecider = Decider<RestaurantCommand?, Restaurant?, RestaurantEvent?>\n\n/**\n * A convenient type alias for EventRepository<Command?, Event?>\n *     \n * notice that OrderCommand and RestaurantCommand are extending `sealed` Command,\n * and that OrderEvent and RestaurantEvent are extending `sealed` Event\n */\ntypealias AggregateEventRepository = EventRepository<Command?, Event?>\n\n\nval aggregate = eventSourcingAggregate(orderDecider combine restaurantDecider, aggregateEventRepository)\n\n\n/**\n * Start handling all your commands!\n */\naggregate.handle(command)\n"))),(0,r.kt)(o.Z,{value:"distributed",label:"distributed",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example of a distributed scenario, in which Order and Restaurant deciders are wrapped by independent aggregate\ncomponents:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n * A convenient type alias for Decider<OrderCommand?, Order?, OrderEvent?>\n */\ntypealias OrderDecider = Decider<OrderCommand?, Order?, OrderEvent?>\n\n/**\n * A convenient type alias for Decider<RestaurantCommand?, Restaurant?, RestaurantEvent?>\n */\ntypealias RestaurantDecider = Decider<RestaurantCommand?, Restaurant?, RestaurantEvent?>\n\n/**\n * A convenient type alias for EventRepository<OrderCommand?, OrderEvent?>\n */\ntypealias OrderAggregateEventRepository = EventRepository<OrderCommand?, OrderEvent?>\n\n/**\n * A convenient type alias for EventRepository<RestaurantCommand?, RestaurantEvent?>\n */\ntypealias RestaurantAggregateEventRepository = EventRepository<RestaurantCommand?, RestaurantEvent?>\n\nval orderAggregate = eventSourcingAggregate(orderDecider, orderAggregateEventRepository)\nval restaurantAggregate = eventSourcingAggregate(restaurantDecider, restaurantAggregateEventRepository)\n\n\n/**\n * Start handling your Order commands!\n */\norderAggregate.handle(orderCommand)\n\n/**\n * Start handling your Restaurant commands!\n */\norderAggregate.handle(orderCommand)\n")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Materialized View")," is a formalization of the event-stored/event-sourced system (View\nModel) ",(0,r.kt)("a",{parentName:"p",href:"/fmodel/docs/application/architecture#event-stored-or-state-stored-systems"},"mentioned previously"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface MaterializedView<S, E> : IView<S, E>, ViewStateRepository<E, S>\n")),(0,r.kt)("p",null,"Materialized view is using/delegating a ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," (domain component) to handle events of type ",(0,r.kt)("inlineCode",{parentName:"p"},"E")," and to maintain a state\nof denormalized projection(s) as a result."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface MaterializedView<S, E> : IView<S, E>, ViewStateRepository<E, S>\n\n// Notice the `delegation pattern`\nfun <S, E> materializedView(\n    view: IView<S, E>,\n    viewStateRepository: ViewStateRepository<E, S>,\n): MaterializedView<S, E> =\n    object : MaterializedView<S, E>, ViewStateRepository<E, S> by viewStateRepository, IView<S, E> by view {}\n\n")),(0,r.kt)(i.Z,{groupId:"style",queryString:"style",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"monolith",label:"monolith",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example of a monolith scenario, in which Order and Restaurant views\nare ",(0,r.kt)("a",{parentName:"em",href:"/fmodel/docs/domain/aggregating-the-behaviour?component-type=view"},"combined")," in one big view and then wrapped by one\nmaterialized-view component:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n * A convenient type alias for View<OrderViewState?, OrderEvent?>\n */\ntypealias OrderView = View<OrderViewState?, OrderEvent?>\n\n/**\n * A convenient type alias for View<RestaurantViewState?, RestaurantEvent?>\n */\ntypealias RestaurantView = View<RestaurantViewState?, RestaurantEvent?>\n\n/**\n * A convenient type alias for ViewStateRepository<OrderEvent?, Pair<OrderViewState?, RestaurantViewState?>>\n */\ntypealias MaterializedViewStateRepository = ViewStateRepository<Event?, Pair<OrderViewState?, RestaurantViewState?>>\n\n\nval materializedView = materializedView(orderView combine restaurantView, materializedViewStateRepository)\n\n\n/**\n * Start handling all your events, and projecting them into denormalized state which is adequate for querying.\n */\nmaterializedView.handle(event)\n"))),(0,r.kt)(o.Z,{value:"distributed",label:"distributed",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example of a distributed scenario, in which Order and Restaurant views are wrapped by independent materialized-view\ncomponents:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n * A convenient type alias for View<OrderViewState?, OrderEvent?>\n */\ntypealias OrderView = View<OrderViewState?, OrderEvent?>\n\n/**\n * A convenient type alias for View<RestaurantViewState?, RestaurantEvent?>\n */\ntypealias RestaurantView = View<RestaurantViewState?, RestaurantEvent?>\n\n/**\n * A convenient type alias for ViewStateRepository<OrderEvent?, OrderViewState?>\n */\ntypealias OrderMaterializedViewStateRepository = ViewStateRepository<OrderEvent?, OrderViewState?>\n\n/**\n * A convenient type alias for ViewStateRepository<RestaurantEvent?, RestaurantViewState?>\n */\ntypealias RestaurantMaterializedViewStateRepository = ViewStateRepository<RestaurantEvent?, RestaurantViewState?>\n\nval orderMaterializedView = materializedView(orderView, orderMaterializedViewStateRepository)\nval restaurantMaterializedView = materializedView(restaurantView, restaurantMaterializedViewStateRepository)\n\n\n/**\n * Start handling your Order events, and projecting them into denormalized state which is adequate for querying.\n */\norderMaterializedView.handle(orderEvent)\n\n/**\n * Start handling your Restaurant events, and projecting them into denormalized state which is adequate for querying.\n */\nrestaurantMaterializedView.handle(restauranEvent)\n"))))),(0,r.kt)(o.Z,{value:"state-stored",label:"State-Stored",mdxType:"TabItem"},(0,r.kt)("p",null,"State-stored systems are using single canonical model for writing and reading/presenting, by default."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"event-modeling-traditional-systems",src:n(6567).Z,width:"5480",height:"5461"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"State-stored Aggregate")," is a formalization of the state-stored\nsystem ",(0,r.kt)("a",{parentName:"p",href:"/fmodel/docs/application/architecture#event-stored-or-state-stored-systems"},"mentioned previously"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface StateStoredAggregate<C, S, E> : IDecider<C, S, E>, StateRepository<C, S>\n")),(0,r.kt)("p",null,"State-stored Aggregate is using/delegating a ",(0,r.kt)("inlineCode",{parentName:"p"},"Decider")," to handle commands and produce new state. It belongs to the\nApplication layer. In order to\nhandle the command, aggregate needs to fetch the current state via ",(0,r.kt)("inlineCode",{parentName:"p"},"StateRepository.fetchState")," function first, and then\ndelegate the command to the decider which can produce new state as a result. New state is then stored\nvia ",(0,r.kt)("inlineCode",{parentName:"p"},"StateRepository.save")," suspending function."),(0,r.kt)("p",null,"The Delegation pattern has proven to be a good alternative to ",(0,r.kt)("inlineCode",{parentName:"p"},"implementation inheritance"),", and Kotlin supports it\nnatively requiring zero boilerplate code. ",(0,r.kt)("inlineCode",{parentName:"p"},"stateStoredAggregate")," function is a good example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun <C, S, E> stateStoredAggregate(\n    decider: IDecider<C, S, E>,\n    stateRepository: StateRepository<C, S>\n): StateStoredAggregate<C, S, E> =\n    object :\n        StateStoredAggregate<C, S, E>,\n        StateRepository<C, S> by stateRepository,\n        IDecider<C, S, E> by decider {}\n")),(0,r.kt)(i.Z,{groupId:"style",queryString:"style",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"monolith",label:"monolith",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example of a monolith scenario, in which Order and Restaurant deciders\nare ",(0,r.kt)("a",{parentName:"em",href:"/fmodel/docs/domain/aggregating-the-behaviour?component-type=decider"},"combined/aggregated")," in one big decider and then\nwrapped by one aggregate component:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n * A convenient type alias for Decider<OrderCommand?, Order?, OrderEvent?>\n */\ntypealias OrderDecider = Decider<OrderCommand?, Order?, OrderEvent?>\n\n/**\n * A convenient type alias for Decider<RestaurantCommand?, Restaurant?, RestaurantEvent?>\n */\ntypealias RestaurantDecider = Decider<RestaurantCommand?, Restaurant?, RestaurantEvent?>\n\n/**\n * A convenient type alias for StateRepository<Command?, Pair<Restaurant?,Order?>>\n */\ntypealias AggregateStateRepository = StateRepository<Command?, Pair<Restaurant?,Order?>>\n\n\nval aggregate = eventSourcingAggregate(orderDecider combine restaurantDecider, aggregateStateRepository)\n\n/**\n * Start handling all your commands!\n */\naggregate.handle(orderCommand)\n"))),(0,r.kt)(o.Z,{value:"distributed",label:"distributed",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example of a distributed scenario, in which Order and Restaurant deciders are wrapped by independent aggregate\ncomponents:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n * A convenient type alias for Decider<OrderCommand?, Order?, OrderEvent?>\n */\ntypealias OrderDecider = Decider<OrderCommand?, Order?, OrderEvent?>\n\n/**\n * A convenient type alias for Decider<RestaurantCommand?, Restaurant?, RestaurantEvent?>\n */\ntypealias RestaurantDecider = Decider<RestaurantCommand?, Restaurant?, RestaurantEvent?>\n\n/**\n * A convenient type alias for StateRepository<OrderCommand?, Order?>\n */\ntypealias OrderAggregateStateRepository = StateRepository<OrderCommand?, Order?>\n\n/**\n * A convenient type alias for StateRepository<RestaurantCommand?, Restaurant?>\n */\ntypealias RestaurantAggregateStateRepository = StateRepository<RestaurantCommand?, Restaurant?>\n\nval orderAggregate = eventSourcingAggregate(orderDecider, orderAggregateStateRepository)\nval restaurantAggregate = eventSourcingAggregate(restaurantDecider, restaurantAggregateStateRepository)\n\n/**\n * Start handling your commands of type OrderCommand!\n */\norderAggregate.handle(orderCommand)\n\n/**\n * Start handling your commands of type RestaurantCommand!\n */\nrestaurantAggregate.handle(restaurantCommand)\n")))))),(0,r.kt)("h2",{id:"application-modules"},"Application modules"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"application")," modules are organized in hierarchy:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"application")," - ",(0,r.kt)("strong",{parentName:"li"},"base module")," is declaring all application interfaces: aggregate, materialized-view, saga-manager."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"extensions")," - ",(0,r.kt)("strong",{parentName:"li"},"extension modules")," are extending the base module by providing concrete implementation of the ",(0,r.kt)("inlineCode",{parentName:"li"},"handle")," method as an extension function(s).",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"application-vanilla")," - is using plain/vanilla Kotlin to implement the application layer in order to load the state, orchestrate the execution of the logic and save new state."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"application-arrow")," - is using ",(0,r.kt)("a",{parentName:"li",href:"https://arrow-kt.io/"},"Arrow")," and Kotlin to implement the application layer in order to load the state, orchestrate the execution of the logic and save new state - providing structured, predictable and efficient handling of errors (using ",(0,r.kt)("inlineCode",{parentName:"li"},"Either"),").")))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The libraries are non-intrusive, and you can select any flavor, choose both (vanilla and/or arrow) or make your own extension."),(0,r.kt)("p",{parentName:"admonition"},"You can use only domain library and model the orchestration (application library) on your own.")),(0,r.kt)("p",null,"An example (taken from FModel ",(0,r.kt)("inlineCode",{parentName:"p"},"application-vanilla")," library):"),(0,r.kt)(i.Z,{groupId:"system-type",queryString:"system-type",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"event-stored",label:"Event-Stored / Event-Sourced",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun <C, S, E> EventSourcingAggregate<C, S, E>.handle(command: C): Flow<E> =\n   command\n      .fetchEvents()\n      .computeNewEvents(command)\n      .save()\n"))),(0,r.kt)(o.Z,{value:"state-stored",label:"State-Stored",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"suspend fun <C, S, E> StateStoredAggregate.handle(command: C): S =\n    command\n        .fetchState()\n        .computeNewState(command)\n        .save()\n")))),(0,r.kt)("p",null,"Feel free to use these two extension modules, or create your own by using these two as a fine example."))}g.isMDXComponent=!0},5557:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/event-modeling-event-driven-systems-dd36561b4d665e5dfcc97acc8fccbf92.png"},6567:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/event-modeling-traditional-systems-1f8ef3235fa73ccc9ec41b05082804da.png"}}]);